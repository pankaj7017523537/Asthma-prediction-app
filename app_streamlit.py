import streamlit as st
import pandas as pd
import joblib
from fpdf import FPDF
import base64
import os

# Load model and features
model = joblib.load("asthma_model.pkl")
feature_names = joblib.load("feature_names.pkl")

# Set page configuration
st.set_page_config(page_title="Asthma Risk Predictor", layout="centered")

# Language toggle
lang = st.sidebar.selectbox("Language", ["English", "Hindi"])

texts = {
    "English": {
        "title": "ЁЯлБ Asthma Risk Prediction",
        "description": "Fill the following health parameters to check your risk of asthma.",
        "predict": "Predict",
        "input_preview": "Model Input Preview",
        "asthma": "тЪая╕П Asthma Detected. Please consult a doctor.",
        "no_asthma": "тЬЕ No Asthma Detected. Keep up the healthy lifestyle!",
        "download_report": "ЁЯУД Download Report (PDF)"
    },
    "Hindi": {
        "title": "ЁЯлБ рджрдорд╛ рдЬреЛрдЦрд┐рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        "description": "рджрдорд╛ рдХреЗ рдЬреЛрдЦрд┐рдо рдХреА рдЬрд╛рдВрдЪ рдХреЗ рд▓рд┐рдП рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкреИрд░рд╛рдореАрдЯрд░ рднрд░реЗрдВред",
        "predict": "рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдХрд░реЗрдВ",
        "input_preview": "рдореЙрдбрд▓ рдЗрдирдкреБрдЯ рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди",
        "asthma": "тЪая╕П рджрдорд╛ рдХрд╛ рдЬреЛрдЦрд┐рдо рдкрд╛рдпрд╛ рдЧрдпрд╛ред рдХреГрдкрдпрд╛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
        "no_asthma": "тЬЕ рдХреЛрдИ рджрдорд╛ рдирд╣реАрдВ рдкрд╛рдпрд╛ рдЧрдпрд╛ред рд╕реНрд╡рд╕реНрде рдЬреАрд╡рдирд╢реИрд▓реА рдмрдирд╛рдП рд░рдЦреЗрдВ!",
        "download_report": "ЁЯУД рд░рд┐рдкреЛрд░реНрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ (PDF)"
    }
}

text = texts[lang]

st.title(text["title"])
st.markdown(text["description"])

# Dark mode toggle
dark_mode = st.sidebar.toggle("ЁЯМЩ Dark Mode")
if dark_mode:
    st.markdown("""<style>body { background-color: #1e1e1e; color: white; }</style>""", unsafe_allow_html=True)

# Labels
pretty_labels = {
    "PollutionExposure": "Pollution Exposure (0тАУ9)",
    "PollenExposure": "Pollen Exposure (0тАУ9)",
    "SleepQuality": "Sleep Quality (0тАУ9)",
    "PhysicalActivity": "Physical Activity (0тАУ9)",
    "DustExposure": "Dust Exposure (0тАУ9)",
    "DietQuality": "Diet Quality (0тАУ9)"
}

# Collect input
user_input = {}
for feature in feature_names:
    if feature == "Age":
        user_input[feature] = st.slider("Age (years)", 5, 80, 25)
    elif feature in pretty_labels:
        user_input[feature] = st.slider(pretty_labels[feature], 0, 9, 5)
    else:
        user_input[feature] = st.selectbox(f"{feature}", [0, 1, 2, 3], format_func=lambda x: f"Level {x}")

# Prediction logic
if st.button(f"ЁЯФН {text['predict']}"):
    input_df = pd.DataFrame([user_input])

    # тЬЕ Ensure correct feature order
    input_df = input_df[feature_names]

    st.write(f"тЬЕ {text['input_preview']}:", input_df)

    prediction = model.predict(input_df)[0]
    prediction_proba = model.predict_proba(input_df)[0]

    st.subheader("ЁЯУК Prediction Probability")
    st.write({
        "No Asthma": round(prediction_proba[0]*100, 2),
        "Asthma": round(prediction_proba[1]*100, 2)
    })

    # Lifestyle suggestions
    st.subheader("ЁЯТб Lifestyle Suggestions")
    if prediction == 1:
        st.error(text['asthma'])
        st.markdown("- ЁЯзШ Improve air quality\n- ЁЯЫПя╕П Sleep better\n- ЁЯеЧ Eat healthy\n- ЁЯПГ Be active")
    else:
        st.success(text['no_asthma'])
        st.markdown("- ЁЯСН Keep it up!\n- ЁЯМ┐ Avoid pollution\n- ЁЯТд Maintain rest routines")

    # PDF Report
    pdf = FPDF()
    pdf.add_page()
    
    # Use Unicode-supporting font
    font_path = "DejaVuSans.ttf"
    if not os.path.exists(font_path):
        st.warning("Please download 'DejaVuSans.ttf' and place it in the app directory for Unicode PDF support.")
    else:
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.set_font("DejaVu", size=12)

        pdf.cell(200, 10, txt=text['title'], ln=True, align='C')
        for key, val in user_input.items():
            pdf.cell(200, 10, txt=f"{key}: {val}", ln=True)

        pdf.cell(200, 10, txt=f"Prediction: {'Asthma' if prediction == 1 else 'No Asthma'}", ln=True)

        pdf_path = "asthma_report.pdf"
        pdf.output(pdf_path)

        with open(pdf_path, "rb") as f:
            b64_pdf = base64.b64encode(f.read()).decode('utf-8')
            href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="asthma_report.pdf">{text["download_report"]}</a>'
            st.markdown(href, unsafe_allow_html=True)
